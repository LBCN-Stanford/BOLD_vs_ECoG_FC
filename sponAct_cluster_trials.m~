%% kmeans clustering of trials at target electrode for spontaneous activation events at a seed electrode
% must first run detect_spontaneous_events_multirun.m

condition=input('Rest (1) gradCPT (2): ','s');
if condition=='1'
    condition='Rest'
elseif condition=='2'
    condition='gradCPT'
end

%% Defaults
run_kmeans=1; % set to 1 to run kmeans clustering
k=3; % Number of kmeans clusters
k_perm=1000; % Number of kmeans repetitions
distance_metric='correlation'; % distance metric for kmeans cluster (e.g. sqeuclidean, correlation)
srate=1000; % sampling rate (Hz)
getECoGSubDir; global globalECoGDir;
sub=input('Patient: ','s');
seed_name=input('Seed electrode name: ','s');
elec_name=input('Target electrode name: ','s');
load('cdcol.mat');
color_options=[cdcol.orange; cdcol.cobaltblue; cdcol.grassgreen; cdcol.russet; cdcol.brown; cdcol.periwinkleblue; cdcol.lightolive; ...
    cdcol.metalicdarkgold; cdcol.purple; cdcol.portraitdarkflesh5; cdcol.lightcadmium; cdcol.darkulamarine; cdcol.pink];

%% Loop through runs and create matrix of time series for all trials
cd([globalECoGDir filesep condition filesep sub]);
load('runs.txt');

trial_ts=[]; all_true={}; all_false={};
for i=1:length(runs)
    curr_run=num2str(runs(i));
cd([globalECoGDir filesep condition filesep sub filesep 'Run' curr_run]);
% Load epoched file
data_file=dir(['e' seed_name '*']);
data_file=data_file(2,1).name;
D=spm_eeg_load(data_file);
elec_num=indchannel(D,elec_name);

% Extract trials and prepare for kmeans clustering
trials=[];
for j=1:size(D,3)
   trials=[trials; D(elec_num,:,j)];     
end
trial_ts=[trial_ts; trials];

% store # trials per run
run_trials(i)=size(trials,1);

% load spAct event indices (within run) that correspond to mountains (true) or not (false)
load([seed_name '_true_spAct.mat']);
load([seed_name '_false_spAct.mat']);
all_true{i}=true_mt_ind; all_false{i}=false_mt_ind;
end

%% clustering based on Louvain algorithm
trial_ts_vert=trial_ts';
trial_mat=corrcoef(trial_ts_vert);
[M,Q]=community_louvain(trial_mat,[],[],'negative_sym');

%% silhouette values for different k solutions
silh=evalclusters(trial_ts,'kmeans','silhouette','klist',[2:20]);

%% kmeans clustering
if run_kmeans==1
[IDX,C]=kmeans(trial_ts,k,'distance',distance_metric,'display','final','replicate',k_perm,'maxiter',250);
end

%% Get Louvain clusters' average time courses
  for i=1:max(M)
      louvain_cluster_ts=[];
      louvain_cluster_ts=trial_ts_vert(:,find(M==i));
      louvain_cluster_ts_mean(:,i)=mean(louvain_cluster_ts,2);  
      louvain_cluster_ts_SE(:,i)=std(louvain_cluster_ts')/sqrt(size(find(M==i),1));
  end
  
%% Get kmeans clusters' average time courses
if run_kmeans==1
  for i=1:k
      cluster_ts=[];
      cluster_ts=trial_ts_vert(:,find(IDX==i));
      cluster_ts_mean(:,i)=mean(cluster_ts,2);  
      cluster_ts_SE(:,i)=std(cluster_ts')/sqrt(size(find(IDX==i),1));
  end
end

  %% Number of trials classified per cluster
  if run_kmeans==1
 for i=1:k
   nTrials_clusters(i)=length(find(IDX==i)); 
 end 
  end
  
for i=1:max(M)
   nTrials_clusters_louvain(i)=length(find(M==i)); 
end
 
%% For gradCPT, compare clusters in terms of alignment with mountain events
curr_trials=0;
for i=1:length(runs)
    run_inds=[curr_trials+1:curr_trials+run_trials(i)];
    curr_trials=curr_trials+run_trials(i);
    curr_IDX=ID(run_inds);
end

  %% plot cluster time courses
  % Louvain
   figure1=figure('Position', [100, 100, 1024, 500]);
  for i=1:max(M)
   plot(D.time,louvain_cluster_ts_mean(:,i),'LineWidth',2,'Color',color_options(i,:));
 set(gca,'Fontsize',14,'Fontweight','bold','LineWidth',2,'TickDir','out','box','off');
 ylabel('HFB Power');
 xlim([D.time(1) D.time(end)]);
  line([D.time(1) D.time(end)],[0 0],'LineWidth',1,'Color','k');
 hold on;
 
    shadedErrorBar(D.time,louvain_cluster_ts_mean(:,i),louvain_cluster_ts_SE(:,i),{'linewidth',2,'Color',color_options(i,:)},0.8);
    h=vline(0,'k-');
    title(['Louvain clusters']);
 hold on;
  end
  
  % kmeans
  if run_kmeans==1
 figure1=figure('Position', [100, 100, 1024, 500]);
  for i=1:k
   plot(D.time,cluster_ts_mean(:,i),'LineWidth',2,'Color',color_options(i,:));
 set(gca,'Fontsize',14,'Fontweight','bold','LineWidth',2,'TickDir','out','box','off');
 ylabel('HFB Power');
 xlim([D.time(1) D.time(end)]);
  line([D.time(1) D.time(end)],[0 0],'LineWidth',1,'Color','k');
 hold on;
 
    shadedErrorBar(D.time,cluster_ts_mean(:,i),cluster_ts_SE(:,i),{'linewidth',2,'Color',color_options(i,:)},0.8);
    h=vline(0,'k-');
    title(['kmeans clusters']);
 hold on;
  end
  end
  
  
  
  